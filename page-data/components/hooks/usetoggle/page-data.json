{
    "componentChunkName": "component---src-templates-component-page-template-jsx",
    "path": "/components/hooks/usetoggle/",
    "result": {"data":{"mdx":{"id":"4a0ab8fa-4119-5951-ab27-6d281fc22e22","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useToggle\",\n  \"type\": \"hook\",\n  \"categories\": [\"Hooks\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Toggle a boolean value on or off with handlers\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const [state, setOn, setOff, toggle] = useToggle(initialState, handlers);\")), mdx(\"h3\", {\n    \"id\": \"sample-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sample-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Sample Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const defaultIsOn = true;\\n  const handlers = {\\n    handleToggleOn: () => console.log('called handleToggleOn'),\\n    handleToggleOff: () => console.log('called handleToggleOff'),\\n    handleToggle: () => console.log('called handleToggle'),\\n  }\\n\\n  const [isOn, setOn, setOff, toggle] = useToggle(defaultIsOn, handlers);\\n\\n  return (\\n    <div>\\n      <p>\\n        Toggle is\\n        {isOn\\n          ? <Badge variant=\\\"success\\\">On</Badge>\\n          : <Badge variant=\\\"light\\\">Off</Badge>\\n        }\\n      </p>\\n\\n      <Button onClick={setOn} className=\\\"mr-2\\\" variant=\\\"outline-primary\\\">set on</Button>\\n      <Button onClick={setOff} className=\\\"mr-2\\\" variant=\\\"outline-primary\\\">set off</Button>\\n      <Button onClick={toggle} className=\\\"mr-2\\\" variant=\\\"outline-primary\\\">toggle</Button>\\n    </div>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"basic-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Basic Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const [isOpen, open, close] = useToggle(false);\\n\\n  return (\\n    <Card style={{ width: '18rem' }}>\\n      <Card.Img variant=\\\"top\\\" src=\\\"https://source.unsplash.com/400x200/?nature,flower\\\" />\\n      <Card.Body>\\n        <Card.Title>Card Title</Card.Title>\\n        <Card.Text>\\n          Some quick example text to build on the card title and make up the bulk of\\n          the card's content.\\n        </Card.Text>\\n        {\\n          isOpen ? (\\n            <Card.Text>\\n              <p>Poutine cred portland heirloom seitan sartorial 90's cray. Humblebrag blue bottle venmo, cloud bread cronut neutra sartorial whatever slow-carb tattooed cliche helvetica poutine squid. Direct trade health goth gentrify kitsch, heirloom blog umami synth ennui seitan messenger bag. Literally poutine slow-carb, hexagon leggings seitan readymade.</p>\\n              <Button block variant=\\\"outline-primary\\\" onClick={close}>Close</Button>\\n            </Card.Text>\\n          ) : (\\n            <Button block variant=\\\"outline-primary\\\" onClick={open}>See more</Button>\\n          )\\n        }\\n      </Card.Body>\\n    </Card>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useToggle","status":"New","notes":"","components":null}},"components":{"nodes":[]}},"pageContext":{"id":"4a0ab8fa-4119-5951-ab27-6d281fc22e22","components":[],"cssVariables":""}},
    "staticQueryHashes": ["1303225137","3649515864","63159454"]}