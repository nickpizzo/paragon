{
    "componentChunkName": "component---src-templates-component-page-template-jsx",
    "path": "/components/iconbuttontoggle/",
    "result": {"data":{"mdx":{"id":"1b6f527f-4d49-5ad3-b705-c4217f17ae53","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IconButtonToggle\",\n  \"type\": \"component\",\n  \"components\": [\"IconButtonToggle\"],\n  \"categories\": [\"Buttonlike\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"In Progress\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"Helps toggle Data view between list, card view etc.\\n\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Wraps a set of ``IconButton`` or ``IconButtonWithTooltip`` components in a group and marks as active only one at a time. The IconButton with a value matching the 'activeValue' is set to be in the active state When one presses on one of the buttons, that button is set to active state, and the callback passed to ``onChange`` is called with that value You can pass a tooltip if you use the ``IconButtonWithTooltip`` sub component.\"), mdx(\"h3\", {\n    \"id\": \"basic-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Basic Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"    () => {\\n      const [activeValue, setActiveValue] = React.useState('card');\\n      return (\\n        <>\\n        <div className=\\\"mr-2 mt-2 mb-2\\\">Current value is: <strong>{activeValue}</strong></div>\\n        <IconButtonToggle activeValue={activeValue} onChange={ value => setActiveValue(value) }>\\n          <IconButton value=\\\"card\\\" src={GridView} iconAs={Icon} alt=\\\"Card\\\" />\\n          <IconButton value=\\\"list\\\" src={ListView} iconAs={Icon} alt=\\\"List\\\" />\\n        </IconButtonToggle>\\n        </>\\n      );\\n    }\\n\")), mdx(\"h3\", {\n    \"id\": \"basic-usage-with-tooltips\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#basic-usage-with-tooltips\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Basic Usage (with tooltips)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"    () => {\\n      const [activeValue, setActiveValue] = React.useState('card');\\n      return (\\n        <>\\n        <div className=\\\"mr-2 mt-2 mb-2\\\">Current value is: <strong>{activeValue}</strong></div>\\n        <IconButtonToggle activeValue={activeValue} onChange={ value => setActiveValue(value) }>\\n          <IconButtonWithTooltip tooltipContent=\\\"Card view\\\" value=\\\"card\\\" src={GridView} iconAs={Icon} alt=\\\"Card\\\" />\\n          <IconButtonWithTooltip tooltipContent=\\\"List view\\\" value=\\\"list\\\" src={ListView} iconAs={Icon} alt=\\\"List\\\" />\\n        </IconButtonToggle>\\n        </>\\n      );\\n    }\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"IconButtonToggle","status":"Stable","notes":"Helps toggle Data view between list, card view etc.\n","components":["IconButtonToggle"]}},"components":{"nodes":[{"displayName":"IconButtonToggle","props":[{"defaultValue":{"value":"undefined"},"name":"activeValue","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"value to use to check which button to set to active","doclets":[],"description":{"id":"f96ab595-0e4f-5ec0-818b-967851185152","text":"value to use to check which button to set to active","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"value to use to check which button to set to active\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onChange","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"handler that is passed the currently active button's value when a button is selected","doclets":[],"description":{"id":"aa6b8351-5196-5c89-9934-109ffffb3e96","text":"handler that is passed the currently active button's value when a button is selected","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"handler that is passed the currently active button's value when a button is selected\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"child nodes of type IconButton (or its subcomponents) to be rendered within toggle group","doclets":[],"description":{"id":"f9eec4b9-41f0-56b2-91d2-d4fcb116f03a","text":"child nodes of type IconButton (or its subcomponents) to be rendered within toggle group","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"child nodes of type IconButton (or its subcomponents) to be rendered within toggle group\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"1b6f527f-4d49-5ad3-b705-c4217f17ae53","components":["IconButtonToggle"],"cssVariables":""}},
    "staticQueryHashes": ["1303225137","3649515864","63159454"]}