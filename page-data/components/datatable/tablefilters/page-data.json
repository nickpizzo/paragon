{"componentChunkName":"component---src-templates-component-page-template-jsx","path":"/components/datatable/tablefilters/","result":{"data":{"mdx":{"id":"a3599c1c-e418-596e-abdf-c50f949e3494","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Table Filters\",\n  \"type\": \"component\",\n  \"components\": [\"TextFilter\", \"CheckboxFilter\", \"DropdownFilter\", \"MultiSelectDropdownFilter\"],\n  \"categories\": [\"Table\"],\n  \"status\": \"New\",\n  \"designStatus\": \"In progress\",\n  \"devStatus\": \"In progress\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataTable\"), \" component is a wrapper that uses the \", mdx(\"a\", {\n    href: \"https://react-table.tanstack.com/docs\"\n  }, \"react-table\"), \" library to\\ncreate tables. It can be used as is, or its subcomponents can be used on their own, allowing the developer full control.\"), mdx(\"h3\", {\n    \"id\": \"filtering-and-sorting\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#filtering-and-sorting\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Filtering and sorting\"), mdx(\"p\", null, \"Paragon currently provides a variety of filter types, and you can also define your own filter types.\"), mdx(\"p\", null, \"In the example below, a default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextFilter\"), \" component is used as the default filter for all columns. A default filter can be passed in,\\nor a filter component can be defined on the column using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Filter\"), \" attribute. See \", mdx(\"a\", {\n    href: \"https://react-table.tanstack.com/docs/api/useFilters\"\n  }, \"react-table filters documentation\"), \"\\nfor more information.\"), mdx(\"h3\", {\n    \"id\": \"available-filter-functions\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#available-filter-functions\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Available filter functions\"), mdx(\"p\", null, \"A filtering function can be defined on the column as well as the filter component. Custom filtering functions can also be defined, see \", mdx(\"a\", {\n    href: \"https://react-table.tanstack.com/docs/api/useFilters#column-options\"\n  }, \"react-table filters documentation\"), \"\\nfor more information.\\nFilter functions are defined on the column as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" attribute.\"), mdx(\"dl\", null, mdx(\"dt\", null, \"text\"), mdx(\"dd\", null, \"This is the default filter function. It lower-cases the search string and checks if the row value includes the search string\"), mdx(\"dt\", null, \"exactText\"), mdx(\"dd\", null, \"Checks that the row value matches the search string exactly (case-insensitive)\"), mdx(\"dt\", null, \"exactTextCase\"), mdx(\"dd\", null, \"Checks that the row value matches the search string exactly (case-sensitive)\"), mdx(\"dt\", null, \"includes\"), mdx(\"dd\", null, \"Check that the row value includes the search string\"), mdx(\"dt\", null, \"includesAll\"), mdx(\"dd\", null, \"Check that the row value includes every item in the array\"), mdx(\"dt\", null, \"includesSome\"), mdx(\"dd\", null, \"Check that row value includes some item in the array\"), mdx(\"dt\", null, \"includesValue\"), mdx(\"dd\", null, \"Check that the filter value includes the value of the row\"), mdx(\"dt\", null, \"exact\"), mdx(\"dd\", null, \"Checks for exact equality between the row value and the search term. \", mdx(\"pre\", null, \"===\")), mdx(\"dt\", null, \"equals\"), mdx(\"dd\", null, \"Checks for equality between the row value and the search term. \", mdx(\"pre\", null, \"==\")), mdx(\"dt\", null, \"between\"), mdx(\"dd\", null, \"Expects an array with a min and max value as the search term. Checks that the row value is between the min and max\")), mdx(\"h3\", {\n    \"id\": \"using-filter-components-with-filter-functions\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#using-filter-components-with-filter-functions\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Using Filter components with filter functions\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MultiSelectDropdownFilter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxFilter\"), \" components expect an array of values. It is best to use them with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"includesValue\"), \" filter function.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextFilter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DropdownFilter\"), \" components can be used with a variety of the above \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" functions.\"), mdx(\"h3\", {\n    \"id\": \"textfilter-multiselectdropdownfilter-checkboxfilter\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#textfilter-multiselectdropdownfilter-checkboxfilter\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"TextFilter, MultiSelectDropdownFilter, CheckboxFilter\"), mdx(\"p\", null, \"The checkbox filter is used in the dropdown.\\nA CheckboxFilter is used on the coat color column. Filters can be defined on the columns themselves.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxFilter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DropdownFilter\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MultiSelectDropdownFilter\"), \" additionally require that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterChoices\"), \" property be defined on the column.\"), mdx(\"p\", null, \"The number of filters displayed in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TableControlBar\"), \" can be modified by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numBreakoutFilters\"), \" prop. When the screen size is small,\\nall filters will be rendered in the dropdown.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<DataTable\\n  isFilterable\\n  defaultColumnValues={{ Filter: TextFilter }}\\n  numBreakoutFilters={2}\\n  columns={[\\n    {\\n      Header: 'Name',\\n      accessor: 'name',\\n\\n    },\\n    {\\n      Header: 'Age',\\n      accessor: 'age',\\n      Filter: MultiSelectDropdownFilter,\\n      filter: 'includesValue',\\n      filterChoices: [\\n        {\\n          name: 'Four',\\n          value: 4,\\n        },\\n        {\\n          name: 'One',\\n          value: 1,\\n        },\\n        {\\n          name: 'Twelve',\\n          value: 12,\\n        },\\n        {\\n          name: 'Nine',\\n          value: 9,\\n        },\\n        {\\n          name: 'Seventeen',\\n          number: 17,\\n          value: 17,\\n        },\\n      ]\\n    },\\n    {\\n      Header: 'Famous For',\\n      accessor: 'famous_for',\\n    },\\n    {\\n      Header: 'Coat Color',\\n      accessor: 'color',\\n      Filter: CheckboxFilter,\\n      filter: 'includesValue',\\n      filterChoices: [{\\n        name: 'russian white',\\n        number: 1,\\n        value: 'russian white',\\n      },\\n      {\\n        name: 'orange tabby',\\n        number: 2,\\n        value: 'orange tabby',\\n      },\\n      {\\n        name: 'brown tabby',\\n        number: 3,\\n        value: 'brown tabby',\\n      },\\n      {\\n        name: 'siamese',\\n        number: 1,\\n        value: 'siamese',\\n      }]\\n    },\\n  ]}\\n  itemCount={7}\\n  data={[\\n    {\\n      name: 'Lil Bub',\\n      color: 'brown tabby',\\n      famous_for: 'weird tongue',\\n      age: 4,\\n    },\\n    {\\n      name: 'Grumpy Cat',\\n      color: 'siamese',\\n      famous_for: 'serving moods',\\n      age: 4,\\n    },\\n    {\\n      name: 'Smoothie',\\n      color: 'orange tabby',\\n      famous_for: 'modeling',\\n      age: 1,\\n    },\\n    {\\n      name: 'Maru',\\n      color: 'brown tabby',\\n      famous_for: 'being a lovable oaf',\\n      age: 12,\\n    },\\n    {\\n      name: 'Keyboard Cat',\\n      color: 'orange tabby',\\n      famous_for: 'piano virtuoso',\\n      age: 9,\\n    },\\n    {\\n      name: 'Long Cat',\\n      color: 'russian white',\\n      famous_for:\\n        'being loooooooooooooooooooooooooooooooooooooooooooooooooooooong',\\n      age: 9,\\n    },\\n    {\\n      name: 'Zeno',\\n      color: 'brown tabby',\\n      famous_for: 'getting halfway there',\\n      age: 17,\\n    },\\n  ]}\\n\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdownfilter\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#dropdownfilter\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"DropdownFilter\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<DataTable\\n  isFilterable\\n  defaultColumnValues={{ Filter: TextFilter }}\\n  numBreakoutFilters={2}\\n  columns={[\\n    {\\n      Header: 'Name',\\n      accessor: 'name',\\n\\n    },\\n    {\\n      Header: 'Age',\\n      accessor: 'age',\\n      Filter: DropdownFilter,\\n      filter: 'equals',\\n      filterChoices: [\\n        {\\n          name: 'Four',\\n          value: 4,\\n        },\\n        {\\n          name: 'One',\\n          value: 1,\\n        },\\n        {\\n          name: 'Twelve',\\n          value: 12,\\n        },\\n        {\\n          name: 'Nine',\\n          value: 9,\\n        },\\n        {\\n          name: 'Seventeen',\\n          number: 17,\\n          value: 17,\\n        },\\n      ]\\n    },\\n    {\\n      Header: 'Famous For',\\n      accessor: 'famous_for',\\n    },\\n    {\\n      Header: 'Coat Color',\\n      accessor: 'color',\\n      Filter: CheckboxFilter,\\n      filter: 'includesValue',\\n      filterChoices: [{\\n        name: 'russian white',\\n        number: 1,\\n        value: 'russian white',\\n      },\\n      {\\n        name: 'orange tabby',\\n        number: 2,\\n        value: 'orange tabby',\\n      },\\n      {\\n        name: 'brown tabby',\\n        number: 3,\\n        value: 'brown tabby',\\n      },\\n      {\\n        name: 'siamese',\\n        number: 1,\\n        value: 'siamese',\\n      }]\\n    },\\n  ]}\\n  itemCount={7}\\n  data={[\\n    {\\n      name: 'Lil Bub',\\n      color: 'brown tabby',\\n      famous_for: 'weird tongue',\\n      age: 4,\\n    },\\n    {\\n      name: 'Grumpy Cat',\\n      color: 'siamese',\\n      famous_for: 'serving moods',\\n      age: 4,\\n    },\\n    {\\n      name: 'Smoothie',\\n      color: 'orange tabby',\\n      famous_for: 'modeling',\\n      age: 1,\\n    },\\n    {\\n      name: 'Maru',\\n      color: 'brown tabby',\\n      famous_for: 'being a lovable oaf',\\n      age: 12,\\n    },\\n    {\\n      name: 'Keyboard Cat',\\n      color: 'orange tabby',\\n      famous_for: 'piano virtuoso',\\n      age: 9,\\n    },\\n    {\\n      name: 'Long Cat',\\n      color: 'russian white',\\n      famous_for:\\n        'being loooooooooooooooooooooooooooooooooooooooooooooooooooooong',\\n      age: 9,\\n    },\\n    {\\n      name: 'Zeno',\\n      color: 'brown tabby',\\n      famous_for: 'getting halfway there',\\n      age: 17,\\n    },\\n  ]}\\n\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Table Filters","status":"New","notes":null,"components":["TextFilter","CheckboxFilter","DropdownFilter","MultiSelectDropdownFilter"]}},"components":{"nodes":[{"displayName":"CheckboxFilter","props":[{"defaultValue":null,"name":"column","type":{"name":"shape","raw":null,"value":{"setFilter":{"name":"func","required":true},"Header":{"name":"union","value":[{"name":"func"},{"name":"node"}],"required":true},"filterChoices":{"name":"arrayOf","value":{"name":"shape","value":{"name":{"name":"string","required":true},"value":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":false},"number":{"name":"number","required":false}}},"required":true},"getHeaderProps":{"name":"func","required":true},"filterValue":{"name":"arrayOf","value":{"name":"any"},"required":false}}},"required":true,"docblock":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","doclets":[],"description":{"id":"9c60b72e-a88a-5645-a3a2-df0c411ae7f6","text":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies a column object.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setFilter\"), \": Function to set the filter value.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \": Column header used for labels and placeholders.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterChoices\"), \": Specifies array of choices.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getHeaderProps\"), \": Generates a key unique to the column being filtered.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterValue\"), \": Value for the filter input.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"DropdownFilter","props":[{"defaultValue":null,"name":"column","type":{"name":"shape","raw":null,"value":{"setFilter":{"name":"func","required":true},"Header":{"name":"union","value":[{"name":"func"},{"name":"node"}],"required":true},"filterChoices":{"name":"arrayOf","value":{"name":"shape","value":{"name":{"name":"string","required":true},"number":{"name":"number","required":false},"value":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":true}}},"required":true},"getHeaderProps":{"name":"func","required":true}}},"required":true,"docblock":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.","doclets":[],"description":{"id":"c1ca8e78-6052-5520-b2c4-f4d273453e92","text":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies a column object.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setFilter\"), \": Function to set the filter value.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \": Column header used for labels and placeholders.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterChoices\"), \": Specifies array of choices.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getHeaderProps\"), \": Generates a key unique to the column being filtered.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"MultiSelectDropdownFilter","props":[{"defaultValue":null,"name":"column","type":{"name":"shape","raw":null,"value":{"setFilter":{"name":"func","description":"Function to set the filter value","required":true},"Header":{"name":"union","value":[{"name":"func"},{"name":"node"}],"description":"Column header used for labels and placeholders","required":true},"filterChoices":{"name":"arrayOf","value":{"name":"shape","value":{"name":{"name":"string","required":true},"number":{"name":"number","required":false},"value":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":true}}},"description":"Names and values for the select options","required":true},"getHeaderProps":{"name":"func","description":"Generates a key unique to the column being filtered","required":true},"filterValue":{"name":"arrayOf","value":{"name":"custom","raw":"[PropTypes.number, PropTypes.string]"},"required":false}}},"required":true,"docblock":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","doclets":[],"description":{"id":"10ad3599-8407-59e1-bc6b-c455bd383da2","text":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`filterChoices`: Specifies array of choices.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies a column object.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setFilter\"), \": Function to set the filter value.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \": Column header used for labels and placeholders.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterChoices\"), \": Specifies array of choices.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getHeaderProps\"), \": Generates a key unique to the column being filtered.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterValue\"), \": Value for the filter input.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"TextFilter","props":[{"defaultValue":null,"name":"column","type":{"name":"shape","raw":null,"value":{"setFilter":{"name":"func","required":true},"Header":{"name":"union","value":[{"name":"func"},{"name":"node"}],"required":true},"getHeaderProps":{"name":"func","required":true},"filterValue":{"name":"string","required":false}}},"required":true,"docblock":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","doclets":[],"description":{"id":"4b70cf27-110e-5b7f-aaf7-1481bd642a24","text":"Specifies a column object.\n\n`setFilter`: Function to set the filter value.\n\n`Header`: Column header used for labels and placeholders.\n\n`getHeaderProps`: Generates a key unique to the column being filtered.\n\n`filterValue`: Value for the filter input.","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies a column object.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setFilter\"), \": Function to set the filter value.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \": Column header used for labels and placeholders.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getHeaderProps\"), \": Generates a key unique to the column being filtered.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filterValue\"), \": Value for the filter input.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"a3599c1c-e418-596e-abdf-c50f949e3494","components":["TextFilter","CheckboxFilter","DropdownFilter","MultiSelectDropdownFilter"],"cssVariables":""}},"staticQueryHashes":["1303225137","3649515864","63159454"]}