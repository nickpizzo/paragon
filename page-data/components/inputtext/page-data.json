{
    "componentChunkName": "component---src-templates-component-page-template-jsx",
    "path": "/components/inputtext/",
    "result": {"data":{"mdx":{"id":"90005de3-ec3c-5e44-a520-cfb5c6a53efb","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputText\",\n  \"type\": \"component\",\n  \"components\": [\"InputText\"],\n  \"categories\": [\"Forms (deprecated)\"],\n  \"status\": \"Deprecate Soon\",\n  \"designStatus\": \"TBD\",\n  \"devStatus\": \"To Do\",\n  \"notes\": \"Replaced by Input and ValidationFormGroup\\n\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"minimal-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#minimal-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"minimal usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText name=\\\"name\\\" label=\\\"First Name\\\" value=\\\"Foo Bar\\\" />\\n\")), mdx(\"h3\", {\n    \"id\": \"read-only\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#read-only\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"read only\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText name=\\\"inputState\\\" label=\\\"Input State\\\" value=\\\"Read Only\\\" readOnly />\\n\")), mdx(\"h3\", {\n    \"id\": \"validation\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#validation\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"validation\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText\\n  id=\\\"username\\\"\\n  name=\\\"username\\\"\\n  label=\\\"Username\\\"\\n  description=\\\"The unique name that identifies you throughout the site.\\\"\\n  validator={value => {\\n    let feedback = { isValid: true };\\n    if (value.length < 3) {\\n      feedback = {\\n        isValid: false,\\n        validationMessage: 'Username must be at least 3 characters in length.',\\n      };\\n    }\\n    return feedback;\\n  }}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"validation-with-danger-theme\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#validation-with-danger-theme\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"validation with danger theme\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText\\n  name=\\\"username\\\"\\n  label=\\\"Username\\\"\\n  description=\\\"The unique name that identifies you throughout the site.\\\"\\n  validator={value => {\\n    let feedback = { isValid: true };\\n    if (value.length < 3) {\\n      feedback = {\\n        isValid: false,\\n        validationMessage: 'Username must be at least 3 characters in length.',\\n        dangerIconDescription: 'Error',\\n      };\\n    }\\n    return feedback;\\n  }}\\n  themes={['danger']}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"label-as-element\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#label-as-element\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"label as element\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText\\n  name=\\\"username\\\"\\n  label={<span lang=\\\"en\\\">Element</span>}\\n  value=\\\"Label is wrapped in language span\\\"\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"focus-test\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#focus-test\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"focus test\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"class FocusInputWrapper extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { open: true };\\n\\n    this.resetStatusAlertWrapperState = this.resetStatusAlertWrapperState.bind(\\n      this,\\n    );\\n  }\\n\\n  resetStatusAlertWrapperState() {\\n    this.setState({ open: false });\\n    this.inputForm.focus();\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <StatusAlert\\n          alertType=\\\"info\\\"\\n          open={this.state.open}\\n          dialog=\\\"Close me to input data!\\\"\\n          onClose={this.resetStatusAlertWrapperState}\\n        />\\n        <InputText\\n          id=\\\"data\\\"\\n          name=\\\"data\\\"\\n          label=\\\"Data Input\\\"\\n          inputRef={input => {\\n            this.inputForm = input;\\n          }}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"different-textual-input-types\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#different-textual-input-types\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"different textual input types\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<form>\\n  <InputText\\n    name=\\\"search\\\"\\n    label=\\\"Search\\\"\\n    value=\\\"what is paragon\\\"\\n    type=\\\"search\\\"\\n    id=\\\"input-search\\\"\\n  />\\n  <InputText\\n    name=\\\"email\\\"\\n    label=\\\"Email\\\"\\n    value=\\\"paragon@edx.org\\\"\\n    type=\\\"email\\\"\\n    id=\\\"input-email\\\"\\n  />\\n  <InputText\\n    name=\\\"url\\\"\\n    label=\\\"Url\\\"\\n    value=\\\"https://edx.github.io/paragon\\\"\\n    type=\\\"url\\\"\\n    id=\\\"input-url\\\"\\n  />\\n  <InputText\\n    name=\\\"telephone\\\"\\n    label=\\\"Telephone\\\"\\n    value=\\\"1-(555)-555-5555\\\"\\n    type=\\\"tel\\\"\\n    id=\\\"input-tel\\\"\\n  />\\n  <InputText\\n    name=\\\"password\\\"\\n    label=\\\"Password\\\"\\n    value=\\\"hunter2\\\"\\n    type=\\\"password\\\"\\n    id=\\\"input-password\\\"\\n  />\\n  <InputText\\n    name=\\\"number\\\"\\n    label=\\\"Number\\\"\\n    value={42}\\n    type=\\\"number\\\"\\n    id=\\\"input-number\\\"\\n  />\\n  <InputText\\n    name=\\\"datetime-local\\\"\\n    label=\\\"Date and time\\\"\\n    value=\\\"2017-04-27T13:45:00\\\"\\n    type=\\\"datetime-local\\\"\\n    id=\\\"input-datetime-local\\\"\\n  />\\n  <InputText\\n    name=\\\"date\\\"\\n    label=\\\"Date\\\"\\n    value=\\\"2017-04-27\\\"\\n    type=\\\"date\\\"\\n    id=\\\"input-date\\\"\\n  />\\n  <InputText\\n    name=\\\"month\\\"\\n    label=\\\"Month\\\"\\n    value=\\\"2017-04\\\"\\n    type=\\\"month\\\"\\n    id=\\\"input-month\\\"\\n  />\\n  <InputText\\n    name=\\\"week\\\"\\n    label=\\\"Week\\\"\\n    value=\\\"2017-W33\\\"\\n    type=\\\"week\\\"\\n    id=\\\"input-week\\\"\\n  />\\n  <InputText\\n    name=\\\"time\\\"\\n    label=\\\"Time\\\"\\n    value=\\\"13:45:00\\\"\\n    type=\\\"time\\\"\\n    id=\\\"input-time\\\"\\n  />\\n  <InputText\\n    name=\\\"color\\\"\\n    label=\\\"Color\\\"\\n    value=\\\"#BF472C\\\"\\n    type=\\\"color\\\"\\n    id=\\\"input-color\\\"\\n  />\\n</form>\\n\")), mdx(\"h3\", {\n    \"id\": \"price-with-step\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#price-with-step\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"price with step\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText\\n  name=\\\"price\\\"\\n  label=\\\"Price\\\"\\n  type=\\\"number\\\"\\n  value={3.5}\\n  min={0}\\n  step={0.01}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"displayed-inline\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#displayed-inline\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"displayed inline\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<InputText name=\\\"username\\\" label=\\\"Username\\\" value=\\\"foobar\\\" inline />\\n\")), mdx(\"h3\", {\n    \"id\": \"with-input-group-addons\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#with-input-group-addons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"with input group addons\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<form>\\n  <InputText\\n    name=\\\"username\\\"\\n    label=\\\"Username\\\"\\n    value=\\\"foobar\\\"\\n    inputGroupPrepend={<div className=\\\"input-group-text\\\">{'@'}</div>}\\n  />\\n  <InputText\\n    name=\\\"username\\\"\\n    label=\\\"Username\\\"\\n    value=\\\"foobar\\\"\\n    inputGroupAppend={<div className=\\\"input-group-text\\\">{'@example.com'}</div>}\\n  />\\n  <InputText\\n    name=\\\"money\\\"\\n    label=\\\"Money\\\"\\n    type=\\\"number\\\"\\n    value={1000}\\n    inputGroupPrepend={<div className=\\\"input-group-text\\\">{'$'}</div>}\\n    inputGroupAppend={<div className=\\\"input-group-text\\\">{'.00'}</div>}\\n  />\\n  <InputText\\n    name=\\\"search\\\"\\n    label=\\\"Search\\\"\\n    value=\\\"what is paragon\\\"\\n    inputGroupAppend={(\\n      <Button variant=\\\"outline-secondary\\\">Go</Button>\\n    )}\\n  />\\n  <InputText\\n    name=\\\"username\\\"\\n    label=\\\"Username\\\"\\n    value=\\\"foobar\\\"\\n    inputGroupAppend={[\\n      <div className=\\\"input-group-text\\\">\\n        <Icon\\n          id=\\\"checkmark\\\"\\n          className=\\\"fa fa-check\\\"\\n          screenReaderText=\\\"Checkmark\\\"\\n        />\\n      </div>,\\n      <Button variant=\\\"outline-secondary\\\">Go</Button>,\\n    ]}\\n  />\\n  <InputText\\n    name=\\\"password\\\"\\n    label=\\\"Password\\\"\\n    value=\\\"secret\\\"\\n    inputGroupAppend={\\n      <div className=\\\"input-group-text\\\">\\n        <Icon\\n          id=\\\"checkmark\\\"\\n          className=\\\"fa fa-check\\\"\\n          screenReaderText=\\\"Checkmark\\\"\\n        />\\n      </div>\\n    }\\n  />\\n</form>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"InputText","status":"Deprecate Soon","notes":"Replaced by Input and ValidationFormGroup\n","components":["InputText"]}},"components":{"nodes":[]}},"pageContext":{"id":"90005de3-ec3c-5e44-a520-cfb5c6a53efb","components":["InputText"],"cssVariables":""}},
    "staticQueryHashes": ["1303225137","3649515864","63159454"]}