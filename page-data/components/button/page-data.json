{
    "componentChunkName": "component---src-templates-component-page-template-jsx",
    "path": "/components/button/",
    "result": {"data":{"mdx":{"id":"cec0d289-d6b1-57fa-986b-f971ddd79ab5","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Button\",\n  \"type\": \"component\",\n  \"components\": [\"Button\"],\n  \"categories\": [\"Buttonlike\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"TO DO\",\n  \"notes\": \"TODO: Remove subcomponent of deprecated implementation soon\\n\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This component utilizes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" from React-Bootstrap and extends it with an ability to add icons before and after button label, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#with-icons-before-or-after\"\n  }, \"below\"), \" for usage example.\", mdx(\"br\", null), \" \", mdx(\"a\", {\n    href: \"https://react-bootstrap.github.io/components/buttons/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \" See React-Bootstrap for additional documentation. \")), mdx(\"h3\", {\n    \"id\": \"core-buttons\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#core-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Core Buttons\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <Button variant=\\\"brand\\\">Brand</Button>{' '}\\n  <Button variant=\\\"outline-brand\\\">Outline Brand</Button>{' '}\\n  <Button variant=\\\"primary\\\">Primary</Button>{' '}\\n  <Button variant=\\\"outline-primary\\\">Outline Primary</Button>{' '}\\n  <Button variant=\\\"tertiary\\\">Tertiary</Button>{' '}\\n</>\\n\")), mdx(\"h3\", {\n    \"id\": \"core-buttons-inverse-pallete\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#core-buttons-inverse-pallete\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Core Buttons (Inverse Pallete)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<div className=\\\"bg-dark-700 p-4\\\">\\n  <Button variant=\\\"inverse-brand\\\">Brand</Button>{' '}\\n  <Button variant=\\\"inverse-outline-brand\\\">Outline Brand</Button>{' '}\\n  <Button variant=\\\"inverse-primary\\\">Primary</Button>{' '}\\n  <Button variant=\\\"inverse-outline-primary\\\">Outline Primary</Button>{' '}\\n  <Button variant=\\\"inverse-tertiary\\\">Tertiary</Button>{' '}\\n</div>\\n\")), mdx(\"h3\", {\n    \"id\": \"utility-buttons\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#utility-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Utility Buttons\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"success\\\">Success</Button>{' '}\\n    <Button variant=\\\"danger\\\">Danger</Button>{' '}\\n    <Button variant=\\\"outline-success\\\">Success</Button>{' '}\\n    <Button variant=\\\"outline-danger\\\">Danger</Button>{' '}\\n  </div>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"link\\\">Link</Button>{' '}\\n    <Button variant=\\\"light\\\">Light</Button> <Button variant=\\\"dark\\\">Dark</Button>{' '}\\n    <Button variant=\\\"outline-light\\\">Light</Button>{' '}\\n    <Button variant=\\\"outline-dark\\\">Dark</Button>\\n  </div>\\n</>\\n\")), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#size\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Size\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>{' '}\\n    <Button variant=\\\"outline-primary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n  </div>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"primary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>{' '}\\n    <Button variant=\\\"outline-primary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n  </div>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"link\\\" size=\\\"inline\\\">Inline button</Button>\\n    <Button variant=\\\"link\\\" size=\\\"inline\\\">Inline button</Button>\\n  </div>\\n</>\\n\")), mdx(\"h4\", {\n    \"id\": \"when-to-use-the-inline-size\"\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#when-to-use-the-inline-size\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"When to use the inline size\"), mdx(\"p\", null, \"Use inline size buttons for when a button sits with a line of text.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <p>\\n    <span className=\\\"mr-1\\\">2 items selected.</span>\\n    <Button variant=\\\"link\\\" size=\\\"inline\\\" className=\\\"mr-1\\\">Select all</Button>\\n    <Button variant=\\\"link\\\" size=\\\"inline\\\">Clear</Button>\\n  </p>\\n</>\\n\")), mdx(\"h3\", {\n    \"id\": \"block-buttons\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#block-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Block Buttons\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n</>\\n\")), mdx(\"h3\", {\n    \"id\": \"with-icons-before-or-after\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#with-icons-before-or-after\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"With Icons before or after\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <Button variant=\\\"brand\\\" iconBefore={ArrowBack}>Brand</Button>{' '}\\n  <Button variant=\\\"outline-brand\\\" iconAfter={ArrowDropDown}>Outline Brand</Button>{' '}\\n  <Button variant=\\\"primary\\\" iconBefore={Remove} iconAfter={Add}>Primary</Button>{' '}\\n  <Button variant=\\\"outline-primary\\\" iconBefore={Highlight}>Outline Primary</Button>{' '}\\n  <Button variant=\\\"tertiary\\\" iconAfter={Add}>Tertiary</Button>{' '}\\n</>\\n\")), mdx(\"h3\", {\n    \"id\": \"with-a-spinner\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#with-a-spinner\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"With a Spinner\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<>\\n  <Button variant=\\\"primary\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" screenReaderText=\\\"loading some stuff\\\" />\\n  </Button>\\n  <Button variant=\\\"brand\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" />\\n  </Button>\\n  <Button variant=\\\"outline-primary\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" />\\n  </Button>\\n  <Button variant=\\\"outline-brand\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" />\\n  </Button>\\n  <Button variant=\\\"inverse-primary\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" />\\n  </Button>\\n  <Button variant=\\\"inverse-brand\\\" className=\\\"mr-2\\\">\\n    <Spinner animation=\\\"border\\\" />\\n  </Button>\\n</>\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"buttondeprecated\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#buttondeprecated\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Button/Deprecated\"), mdx(\"h3\", {\n    \"id\": \"basic-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Basic Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Button.Deprecated className=\\\"btn-primary\\\">Hello World!</Button.Deprecated>\\n\")), mdx(\"h3\", {\n    \"id\": \"color-variants\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#color-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Color Variants\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<div>\\n  <Button.Deprecated className=\\\"btn-primary\\\">Primary</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-success\\\">Success</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-danger\\\">Danger</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-light\\\">Light</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-dark\\\">Dark</Button.Deprecated>\\n</div>\\n\")), mdx(\"h3\", {\n    \"id\": \"outline-variants\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#outline-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Outline Variants\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<div>\\n  <Button.Deprecated className=\\\"btn-outline-primary\\\">Primary</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-outline-success\\\">Success</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-outline-danger\\\">Danger</Button.Deprecated>\\n</div>\\n\")), mdx(\"h3\", {\n    \"id\": \"inverse-variants\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#inverse-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Inverse Variants\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<div className=\\\"bg-gray-700 p-3\\\">\\n  <Button.Deprecated className=\\\"btn-inverse-primary\\\">Primary</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-inverse-success\\\">Success</Button.Deprecated>\\n  <Button.Deprecated className=\\\"btn-inverse-danger\\\">Danger</Button.Deprecated>\\n</div>\\n\")), mdx(\"h3\", {\n    \"id\": \"link-variant\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#link-variant\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Link Variant\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<div className=\\\"bg-gray-200 p-3\\\">\\n  <Button.Deprecated className=\\\"btn-link\\\">Link with button container</Button.Deprecated>\\n  <br />\\n  <Button.Deprecated className=\\\"btn-link px-0\\\">Button with no horizontal padding</Button.Deprecated>\\n</div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Button","status":"Stable","notes":"TODO: Remove subcomponent of deprecated implementation soon\n","components":["Button"]}},"components":{"nodes":[{"displayName":"Button","props":[{"defaultValue":{"value":"undefined"},"name":"buttonType","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Used to determine the type of button to be rendered.  See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable button types. For example, `buttonType=\"light\"`. The default is `undefined`.","doclets":[],"description":{"id":"887dbd9b-98c8-5c4e-92a5-0cd12d2892ce","text":"Used to determine the type of button to be rendered.  See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable button types. For example, `buttonType=\"light\"`. The default is `undefined`.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Used to determine the type of button to be rendered.  See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/buttons/\"\n  }, \"Bootstrap's buttons documentation\"), \" for a list of applicable button types. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"buttonType=\\\"light\\\"\"), \". The default is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies Bootstrap class names to apply to the button. See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable class names. The default is an empty array.","doclets":[],"description":{"id":"49b7ea98-cc8b-543c-b232-196471dedf92","text":"Specifies Bootstrap class names to apply to the button. See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable class names. The default is an empty array.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies Bootstrap class names to apply to the button. See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/buttons/\"\n  }, \"Bootstrap's buttons documentation\"), \" for a list of applicable class names. The default is an empty array.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"Specifies the text that is displayed within the button.","doclets":[],"description":{"id":"9bed1b26-6561-5027-8296-1b641d781201","text":"Specifies the text that is displayed within the button.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Specifies the text that is displayed within the button.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"inputRef","type":{"name":"union","raw":null,"value":[{"name":"func"},{"name":"shape","value":{"current":{"name":"instanceOf","value":"PropTypes.element","required":false}}}]},"required":false,"docblock":"A function that defines a reference for the button. An example `inputRef` from the calling component could look something like: `inputRef={(input) => { this.button = input; }}`. The default is an empty function.","doclets":[],"description":{"id":"86076af9-25b5-5ccd-baed-879eeae72da3","text":"A function that defines a reference for the button. An example `inputRef` from the calling component could look something like: `inputRef={(input) => { this.button = input; }}`. The default is an empty function.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A function that defines a reference for the button. An example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputRef\"), \" from the calling component could look something like: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputRef={(input) => { this.button = input; }}\"), \". The default is an empty function.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isClose","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert [dismiss button](https://getbootstrap.com/docs/4.0/components/alerts/#dismissing). The default is false.","doclets":[],"description":{"id":"10b6157a-2e22-5b0c-9953-6c004e910408","text":"Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert [dismiss button](https://getbootstrap.com/docs/4.0/components/alerts/#dismissing). The default is false.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Used to determine if the button is a \\\"Close\\\" style button to leverage bootstrap styling. Example use case is with the Status Alert \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/alerts/#dismissing\"\n  }, \"dismiss button\"), \". The default is false.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onBlur","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onBlur` event is triggered. For example, the button could change in color or `buttonType` when focus is changed. The default is an empty function.","doclets":[],"description":{"id":"eca727fa-634f-5993-83b0-d29b3291d83e","text":"A function that would specify what the button should do when the `onBlur` event is triggered. For example, the button could change in color or `buttonType` when focus is changed. The default is an empty function.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A function that would specify what the button should do when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onBlur\"), \" event is triggered. For example, the button could change in color or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"buttonType\"), \" when focus is changed. The default is an empty function.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onClick","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onClick` event is triggered. For example, the button could launch a `Modal`. The default is an empty function.","doclets":[],"description":{"id":"e009fe31-0ad2-5dcc-a8b9-fe48ea2421f3","text":"A function that would specify what the button should do when the `onClick` event is triggered. For example, the button could launch a `Modal`. The default is an empty function.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A function that would specify what the button should do when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" event is triggered. For example, the button could launch a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \". The default is an empty function.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onKeyDown","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onKeyDown` event is triggered.  For example, this could handle using the `Escape` key to trigger the button's action. The default is an empty function.","doclets":[],"description":{"id":"bff6c18d-7139-56e3-9bd5-a803103957e6","text":"A function that would specify what the button should do when the `onKeyDown` event is triggered.  For example, this could handle using the `Escape` key to trigger the button's action. The default is an empty function.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A function that would specify what the button should do when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onKeyDown\"), \" event is triggered.  For example, this could handle using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Escape\"), \" key to trigger the button's action. The default is an empty function.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'button'"},"name":"type","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Used to set the `type` attribute on the `button` tag.  The default type is `button`.","doclets":[],"description":{"id":"c3354a3f-ba53-54bd-9971-286b93493751","text":"Used to set the `type` attribute on the `button` tag.  The default type is `button`.","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Used to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" attribute on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" tag.  The default type is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"cec0d289-d6b1-57fa-986b-f971ddd79ab5","components":["Button"],"cssVariables":"$btn-padding-y:               $input-btn-padding-y !default;\n$btn-padding-x:               $input-btn-padding-x !default;\n$btn-font-family:             $input-btn-font-family !default;\n$btn-font-size:               $input-btn-font-size !default;\n$btn-line-height:             $input-btn-line-height !default;\n\n$btn-padding-y-sm:            $input-btn-padding-y-sm !default;\n$btn-padding-x-sm:            $input-btn-padding-x-sm !default;\n$btn-font-size-sm:            $input-btn-font-size-sm !default;\n$btn-line-height-sm:          $input-btn-line-height-sm !default;\n\n$btn-padding-y-lg:            $input-btn-padding-y-lg !default;\n$btn-padding-x-lg:            $input-btn-padding-x-lg !default;\n$btn-font-size-lg:            $input-btn-font-size-lg !default;\n$btn-line-height-lg:          $input-btn-line-height-lg !default;\n\n$btn-border-width:            $input-btn-border-width !default;\n\n$btn-font-weight:             $font-weight-normal !default;\n$btn-box-shadow:              inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;\n$btn-focus-width:             2px !default;\n$btn-focus-gap:               1px !default;\n$btn-focus-box-shadow:        $input-btn-focus-box-shadow !default;\n$btn-disabled-opacity:        .65 !default;\n$btn-active-box-shadow:       none;\n\n$btn-tertiary-color:          $gray-700 !default;\n$btn-tertiary-bg:             transparent !default;\n$btn-tertiary-hover-bg:       $light-500 !default;\n$btn-tertiary-active-bg:      $light-500 !default;\n$btn-inverse-tertiary-color:          $white !default;\n$btn-inverse-tertiary-bg:             transparent !default;\n$btn-inverse-tertiary-hover-bg:       rgba(255,255,255,.1) !default;\n$btn-inverse-tertiary-active-bg:      rgba(255,255,255,.1) !default;\n\n$btn-link-disabled-color:     theme-color(\"gray\", \"light-text\") !default;\n\n$btn-block-spacing-y:         .5rem !default;\n\n// Allows for customizing button radius independently from global border radius\n$btn-border-radius:           $border-radius !default;\n$btn-border-radius-lg:        $border-radius-lg !default;\n$btn-border-radius-sm:        $border-radius-sm !default;\n\n$btn-transition: null;\n"}},
    "staticQueryHashes": ["1303225137","3649515864","63159454"]}